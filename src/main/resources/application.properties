###### port dla aplikacji#######
#server.port = 8084



## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:postgresql://localhost:5432/PGS
spring.datasource.username= postgres
spring.datasource.password=123sylwlo

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#hibernate.hbm2ddl.auto — okreœla ona, jak hibernate ma siê zachowywaæ przy uruchomieniu. Dostêpne jest kilka opcji:
#validate — tylko weryfikuje, tej opcji powinniœmy u¿ywaæ w dzia³aj¹cej aplikacji, jeœli pojawi siê jakaœ niespójnoœæ, aplikacja siê nie uruchomi
#update — Hibernate w przypadku natrafienia na niespójnoœæ spróbuje j¹ usun¹æ poprzez modyfikacjê schematu; nara¿amy siê przez to na utratê danych, opcja nadaje siê g³ównie do testowania i rozwoju
#create — tworzy schemat i strukturê, usuwaj¹c istniej¹ce dane
#create-drop — podobnie jak create tworzy schemat i strukturê usuwaj¹c istniej¹ce dane, ale przy zamykaniu aplikacji automatycznie usuwa ca³¹ zawartoœæ u¿ywanej bazy danych

security.oauth2.resource.filter-order=3

#security.signing-key=MaYzkSjmkzPC57L
#security.encoding-strength=256
#security.security-realm=Spring Boot JWT Example Realm
#
#security.jwt.client-id=testjwtclientid
#security.jwt.client-secret=XY7kmzoNzl100
#security.jwt.grant-type=password
#security.jwt.scope-read=read
#security.jwt.scope-write=write
#security.jwt.resource-ids=testjwtresourceid
